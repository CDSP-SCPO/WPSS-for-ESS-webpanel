"""
Django settings for sms project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

# -- STDLIB
import os

# -- DJANGO
from django.utils.translation import gettext_lazy as _

# -- THIRDPARTY
# `get_docker_secret(name)` tries to read the value of a confidential
# configuration variable from file /var/run/screts/<name> if it exists
# (production setup), falling back on the environment variable <name>
# (development setup).
# See: https://github.com/fischerfredl/get-docker-secret
from get_docker_secret import get_docker_secret

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
WSGI_APPLICATION = 'qxsms.wsgi.application'

ALLOWED_HOSTS = ['*']
INTERNAL_IPS = ['127.0.0.1']
APPEND_SLASH = True

SECRET_KEY = get_docker_secret('QXSMS_SECRET_KEY', autocast_name=False)
DEBUG = os.getenv('QXSMS_DEBUG', "false").lower() in ["true", "1"]
ENV = os.getenv("QXSMS_ENV", "development")

# API key of the user on whose behalf QxSMS
# makes requests to Qualtrics.
QXSMS_API_KEY = get_docker_secret('QXSMS_API_KEY', autocast_name=False)
QXSMS_LIBRARY_ID = os.environ.get('QXSMS_LIBRARY_ID')
# Directory id where all mailing list will be put
QXSMS_DIRECTORY_ID = os.environ.get('QXSMS_DIRECTORY_ID')
# Private survey for sending single sms
QXSMS_SEND_SURVEY = os.environ.get('QXSMS_SEND_SURVEY', '')
QXSMS_QX_DOMAIN = os.environ.get('QXSMS_QX_DOMAIN')

# The three access levels to the QxSMS application
QXSMS_GROUP_ADMINS = "Hq"
QXSMS_GROUP_MANAGERS = "Managers"
QXSMS_GROUP_PANEL_MEMBERS = "PanelMembers"

# User model
AUTH_USER_MODEL = 'qxauth.User'
LOGOUT_REDIRECT_URL = LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
PASSWORD_RESET_TIMEOUT_DAYS = 1

RABBIT_HOST = os.environ.get('RABBIT_HOST', 'rabbit')
RABBIT_PORT = os.environ.get('RABBIT_PORT', '5672')

# db params
DB_HOST = os.environ.get('POSTGRES_HOST', 'db')
DB_PORT = os.environ.get('POSTGRES_PORT', '5432')
DB_PASS = get_docker_secret('QXSMS_POSTGRES_PASSWORD', autocast_name=False)
DB_USER = os.environ.get('POSTGRES_USER')
DB_NAME = os.environ.get('POSTGRES_DB')

# New in 3.2. For pre-3.2 projects, set to AutoField
# https://docs.djangoproject.com/en/4.0/releases/3.2/#customizing-type-of-auto-created-primary-keys
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Celery
CELERY_BROKER_URL = f'pyamqp://{RABBIT_HOST}:{RABBIT_PORT}'
CELERY_RESULT_BACKEND = 'django-db'

# Application definition
INSTALLED_APPS = [
    'django.forms',
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'qxauth.apps.QxauthConfig',
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'hq.apps.HqConfig',
    'manager.apps.ManagerConfig',
    'panelist.apps.PanelistConfig',
    'utils',
    'phonenumber_field',
    'django_bootstrap5',
    'distributions.apps.DistributionsConfig',
    'django_filters',
    'django_celery_results',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Must stay in 2nd position (see DEBUG)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'qxsms.middleware.ForceEnglishMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'qxsms.middleware.AuthorizationMiddleware',
]

ROOT_URLCONF = 'qxsms.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'utils.context_processors.instance_name',
                'utils.context_processors.qxsms_version',
            ],
        },
    },
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASS,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGE_CODE = 'en-gb'
LANGUAGES = [
    ('cs', _('Czech')),
    ('de', _('German')),
    ('en-gb', _('English')),
    ('fi', _('Finnish')),
    ('fr', _('French')),
    ('hu', _('Hungarian')),
    ('is', _('Icelandic')),
    ('it', _('Italian')),
    ('nl', _('Dutch')),
    ('pt', _('Portuguese')),
    ('sl', _('Slovenian')),
    ('sv', _('Swedish')),
    ('pl', _('Polish')),
]
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'
# Directory under which `django-admin collectstatic` will
# gather all static files so that they can be served by whitenoise.
STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
]

# Bootstrap config
BOOTSTRAP5 = {
    # Set placeholder attributes to label if no placeholder is provided
    'set_placeholder': False,
    # Class to indicate required fields
    'required_css_class': 'field-required',
}

# Email config
EMAIL_SUBJECT_PREFIX = f'{os.getenv("QXSMS_EMAIL_SUBJECT_PREFIX", default="[WPSS-DEV] ")}'
DISTRIBUTIONS_EMAIL_FROM_NAME = os.getenv('QXSMS_QX_EMAIL_FROM_NAME', default='WPSS-DEV')
DISTRIBUTIONS_EMAIL_FROM = os.getenv('QXSMS_QX_EMAIL_FROM', default='wpss-dev@qemailserver.com')
DEFAULT_FROM_EMAIL = f'{DISTRIBUTIONS_EMAIL_FROM_NAME}' \
                     f'<{DISTRIBUTIONS_EMAIL_FROM}>'
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_HOST = os.getenv("QXSMS_SMTP_SERVER")
EMAIL_PORT = int(os.getenv("QXSMS_SMTP_PORT", default='25'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', default='')
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'outbox')
# TODO: env var not set anywhere yet, might be useful in the future?
DISTRIBUTIONS_EMAIL_REPLY = os.getenv('QXSMS_QX_EMAIL_REPLY', default='noreply@qemailserver.com')

# Logs
ADMINS = [(os.getenv("DJANGO_ADMIN_NAME", default="me"), os.getenv("DJANGO_ADMIN_EMAIL", default="me@localhost"))]
LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'mail_admins'],
        },
        'django': {
            'propagate': True,
        },
        'qxsms': {
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['console'],
            'propagate': True,
        },
        'celery': {
            'handlers': ['console'],
            'propagate': True,
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'qxsms_cache',
    }
}

# Debug settings
if DEBUG:
    INSTALLED_APPS += [
        'debug_toolbar',
        'django_extensions',
        'hijack',
        'hijack.contrib.admin',
    ]

    # File base email backend
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'

    # Remove whitenoise from and add debug toolbar to middlewares
    sec, wn, *m = MIDDLEWARE
    MIDDLEWARE = [sec, 'debug_toolbar.middleware.DebugToolbarMiddleware', *m, 'hijack.middleware.HijackUserMiddleware']

    # For debug_toolbar to work when the application is served from a Docker
    # container, we need to add the Docker network gateway IP to the
    # internal IPs (since this is whence the requests will appear to originate
    # from).
    # -- STDLIB
    import socket
    INTERNAL_IPS += [socket.gethostbyname(socket.gethostname())[:-1] + "1"]

    def show_toolbar(request):
        return True

    DEBUG_TOOLBAR_CONFIG = {'SHOW_TOOLBAR_CALLBACK': 'qxsms.settings.show_toolbar'}

# Keep at the end of the file
# Update the variables with the current environment
if ENV == "development":
    RAINBOWTESTS_HIGHLIGHT_PATH = '/qxsms/'
    RAINBOWTESTS_SHOW_MESSAGES = False
    TEST_RUNNER = 'rainbowtests.test.runner.RainbowDiscoverRunner'
    LOGGING = {}
    # Disable password validators
    AUTH_PASSWORD_VALIDATORS = []
    # Generated css will be created there in dev
    STATICFILES_DIRS.append('/static')
